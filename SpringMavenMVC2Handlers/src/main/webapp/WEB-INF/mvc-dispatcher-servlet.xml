<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
<!-- The mvc-dispatcher-servlet.xml is also placed in /WEB-INF directory. 
The org.springframework.web.servlet.view.InternalResourceViewResolver is defined as a 
bean, and is used as internal resource views resolver, meaning that it will find the jsp 
and html files in the /WEB-INF/ folder. We can set properties such as prefix or suffix to the view name to generate the final view page URL
-->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/jsp/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	<!-- 
The BeanNameUrlHandlerMapping class maps URL requests to beans names. It is the default handler mapping class, so it is the one created 
by the DispatcherServlet when Spring cannot find any handler mapping class declared. An example of using the BeanNameUrlHandlerMapping class 
is shown below. There are two beans declared, the first one’s name is helloWorld.htm and its class is the HelloWorldController. So the BeanNameUrlHandlerMapping 
will map any helloWorld URL request to this Controller. The second bean’s name is the hello*.htm and its class is also the HelloWorldController.
 So, in this case, the BeanNameUrlHandlerMapping will map any URL request that starts with hello (such as helloWorld, helloAll) to the HelloWorldController.
 -->
	<bean 
	class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>
 
   <bean name="/helloWorld.htm" 
        class="com.javacodegeeks.snippets.enterprise.HelloWorldController" />
 
   <bean name="/hello*.htm" 
        class="com.javacodegeeks.snippets.enterprise.HelloWorldController" />

<!-- The ControllerClassNameHandlerMapping class uses a convention to determine the mapping between request URLs and the Controller instances 
that are to handle those requests. In this case, there is no need to declare a bean name for the Controller. In the example below, 
the ControllerClassNameHandlerMapping will map to the HelloWorldController all URL requests that start with helloWorld, or helloWorld*. 
In the ControllerClassNameHandlerMapping bean declaration there are two properties to configure, the caseSensitive, which is set to true, 
and the pathPrefix, which is set to /javacodegeeks/. These properties allow ControllerClassNameHandlerMapping to also map to the HelloWorldController 
all URL requests with uppercase characters, like helloWorldJavaCodeGeeks, as also URL requests with path prefix like /javacodegeeks/helloWorld. -->

<!-- 
<bean 
   class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" >
   <property name="caseSensitive" value="true" />
	 <property name="pathPrefix" value="/javacodegeeks" />
   </bean>

 
   <bean class="com.javacodegeeks.snippets.enterprise.HelloWorldController" /> -->
   
   <!-- The SimpleUrlHandlerMapping provides a property called mappings so as to be configured. This property is set in the bean declaration and
    consists of key value mapping pairs. It can be set in two ways, as shown below: -->
    <!-- 
   <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
	   <property name="mappings">
		<props>
		   <prop key="/helloWorld.htm">helloWorldController</prop>
		   <prop key="/*/hello.htm">helloWorldController</prop>
		   <prop key="/hello*.htm">helloWorldController</prop>
		 </props>
	   </property>
	</bean>

   <bean id="helloWorldController" class="com.javacodegeeks.snippets.enterprise.HelloWorldController" />
   
     -->
     
     <!-- Handler mapping priorities
The handler mapping implementations described can be mixed and used together. The only thing that needs to be configured is 
the priority of each mapping class, so that Spring MVC DispatcherServlet will know which handler mapping implementation to use 
with what priority. The priority can be set as a property in every mapping bean declaration, as shown below:

<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
	   <property name="mappings">
		 <value>
		   /helloWorld.htm=helloWorldController
		   /*/hello.htm=helloWorldController
		   /hello*.htm=helloWorldController
		</value>
	   </property>
<property name="order" value="0" />
	</bean>

   <bean id="helloWorldController" class="com.javacodegeeks.snippets.enterprise.HelloWorldController" />


<bean 
   class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" >
   <property name="caseSensitive" value="true" />
	 <property name="pathPrefix" value="/javacodegeeks" />
	<property name="order" value="1" />
   </bean>

 
   <bean class="com.javacodegeeks.snippets.enterprise.HelloWorldController" /> -->

</beans>